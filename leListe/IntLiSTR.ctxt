#BlueJ class context
comment0.target=IntLiSTR
comment0.text=\r\n\ La\ classe\ definisce\ la\ struttura\ interna\ delle\ liste\ di\ interi\ \r\n\ come\ sequenza\ dinamica\ di\ nodi.\r\n\ \r\n\ <p>Nella\ definizione\ di\ questa\ classe\r\n\ si\ adopera\ uno\ stile\ progettuale\ prevalentemente\ imperativo\!\r\n\ tale\ scelta\ sara'\ discussa\ in\ aula\ ...\r\n\ </p>\r\n\ \r\n\ <h2>\ Esercizio\ </h2>\r\n\ <p>\ Controllare\ (e\ completare\ quando\ serve)\ specifiche\ e\ codice;\ \r\n\ aggiungere\ se\ necessario\ algoritmi\ utili\ </p>\r\n\ \ \r\n\ \ Alcuni\ esercizi\ sono\ risolti\ ...\r\n\ \r\n\ @author\ AMPRG2017\r\n\ @version\ (revisione\ 2019-05)\r\n
comment1.params=n
comment1.target=IntLiSTR(int)
comment1.text=\r\n\ COSTRUTTORI\r\n
comment10.params=p\ e
comment10.target=IntLiSTR\ insert(IntLiSTR,\ int)
comment10.text=\r\n\ Metodo\ (di\ classe)\:\ inserimento\ ordinato\ ricorsivo\r\n\ \r\n\ Esercizio\:\ Scrivere\ specifiche\ e\ codice\r\n
comment11.params=p\ e
comment11.target=IntLiSTR\ iInsert(IntLiSTR,\ int)
comment11.text=\r\n\ Metodo\ (di\ classe)\:\ inserimento\ ordinato\ iterativo\r\n\ \r\n\ Esercizio\:\ \r\n\ -\ scrivere\ le\ specifiche\r\n\ -\ verificare\ la\ correttezza\r\n
comment12.params=s\ t
comment12.target=IntLiSTR\ reverse(IntLiSTR,\ IntLiSTR)
comment12.text=\r\n\ Rovesciare\ una\ lista\ su\ un'altra\r\n\ \r\n\ Esercizio\:\r\n\ -\ completare\ le\ specifiche\r\n\ -\ dimostrare\ la\ correttezza\r\n\ -\ confrontare\ e\ discutere\ con\ l'algoritmo\ proposto\ a\ lezione\r\n\r\n\ @param\ \ s\ \ (source)\ lista\ da\ rovesciare\r\n\ @param\ \ t\ \ (target)\ lista\ "ricevente"\ \ \ \ \ \r\n\ @return\ \ \ \ il\ risultato\ (da\ precisare)\r\n
comment2.params=e\ p
comment2.target=IntLiSTR(int,\ IntLiSTR)
comment3.params=n
comment3.target=boolean\ isEmpty(IntLiSTR)
comment3.text=\r\n\ Metodo\ di\ test\ (di\ classe)\:\r\n\r\n\ @param\ \ \ \ n\ nodo\r\n\ @return\ \ \ \ \ true\ sse\ lista\ collegata\ e'\ vuota\r\n
comment4.params=n
comment4.target=int\ head(IntLiSTR)
comment4.text=\r\n\ Metodo\ selettore\ (di\ classe)\:\r\n\r\n\ @param\ \ \ \ n\ nodo,\ non\ nullo\r\n\ @return\ \ \ \ \ il\ valore\ contenuto\ nel\ nodo\r\n
comment5.params=n
comment5.target=IntLiSTR\ tail(IntLiSTR)
comment5.text=\r\n\ Metodo\ selettore\ (di\ classe).\r\n\ ma\ che\ succede\ al\ nodo\ di\ testa?\r\n\r\n\ @param\ \ \ \ n\ nodo,\ non\ nullo\r\n\ @return\ \ \ \ \ il\ puntatore\ al\ prossimo\ nodo\r\n
comment6.params=a\ b
comment6.target=IntLiSTR\ cons(int,\ IntLiSTR)
comment6.text=\r\n\ Metodo\ 'costruttore'\ (di\ classe)\:\r\n\r\n\ @param\ \ \ \ e\ elemento\r\n\ @param\ \ \ \ b\ nodo\r\n\ @return\ \ \ \ \ nuovo\ nodo\ (a.b)\r\n
comment7.params=p
comment7.target=int\ length(IntLiSTR)
comment7.text=\r\n\ Metodo\ (di\ classe)\:\ la\ lunghezza\ della\ catena\ di\ nodi\r\n\r\n\ @param\ \ p\ \ \ nodo\r\n\ @return\ \ \ \ \ numero\ di\ nodi\ collegati\ a\ p\ (compreso)\r\n
comment8.params=p
comment8.target=java.lang.String\ toString(IntLiSTR)
comment8.text=\r\n\ Metodo\ (di\ classe)\:\ la\ stringa\ che\ rappresenta\ la\ catena\ di\ nodi\r\n\r\n\ @param\ \ p\ \ \ nodo\r\n\ @return\ \ \ \ \ stringa\ ...\r\n
comment9.params=p
comment9.target=IntLiSTR\ clone(IntLiSTR)
comment9.text=\r\n\ Metodo\ (di\ classe)\:\ crea\ una\ copia\ identica\ e\ distinta\ (clone)\ la\ lista\r\n\r\n\ @param\ \ p\ \ \ nodo\r\n\ @return\ \ \ \ \ lista\ clonata\r\n
numComments=13
